package com.example.drones.controller;

import com.example.drones.entity.Drone;
import com.example.drones.repository.DroneRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
public class DroneController {
    private DroneRepository repository;

    public DroneController(DroneRepository repository) {
        this.repository = repository;
    }

    public DroneRepository getRepository() {
        return repository;
    }

    public void setRepository(DroneRepository repository) {
        this.repository = repository;
    }

    @GetMapping("/drones")
    public List<Drone> findAll() {
        return repository.findAll();
    }

    @GetMapping("/drones/{id}")
    public ResponseEntity<Drone> findOneById(@PathVariable Long id) {
        Optional<Drone> result = repository.findById(id);
        if (result.isEmpty()) // If the id isn't found
            return ResponseEntity.notFound().build();
        return ResponseEntity.ok(result.get());
    }

    @PostMapping("/drones/new")
    public ResponseEntity<Drone> create(@RequestBody Drone drone) {
        if (drone.getId() != null) // If the new drone has an id, there should be an error, because the id is autogenerated
            return ResponseEntity.badRequest().build();
        Drone newDrone = repository.save(drone);
        return ResponseEntity.ok(newDrone);
    }

    @PutMapping("/drones/edit")
    public ResponseEntity<Drone> update(@RequestBody Drone drone) {
        Long id = drone.getId();
        if (id == null) // If the drone doesn't have an id, there should be an error. When editing, it should have an id
            return ResponseEntity.badRequest().build();

        Optional<Drone> result = repository.findById(id);

        if (result.isEmpty()) // If the id isn't found
            return ResponseEntity.notFound().build();

        Drone editedDrone = repository.save(drone);
        return ResponseEntity.ok(editedDrone);
    }

    @DeleteMapping("/drones/delete/{id}")
    public ResponseEntity<Drone> delete(@PathVariable Long id) {
        if (id == null) // If the drone doesn't have an id, there should be an error. When deleting, it should have an id
            return ResponseEntity.badRequest().build();

        Optional<Drone> result = repository.findById(id);
        if (result.isEmpty()) // If the id isn't found
            return ResponseEntity.notFound().build();

        Drone deletedDrone = result.get();
        repository.deleteById(id);
        return ResponseEntity.ok(deletedDrone);
    }
}
