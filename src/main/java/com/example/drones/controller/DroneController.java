package com.example.drones.controller;

import com.example.drones.entity.Drone;
import com.example.drones.entity.Medication;
import com.example.drones.entity.State;
import com.example.drones.repository.DroneRepository;
import com.example.drones.repository.MedicationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
public class DroneController {
    private DroneRepository repository;
    @Autowired
    private MedicationRepository medicationRepository;

    public DroneController(DroneRepository repository) {
        this.repository = repository;
    }

    public DroneRepository getRepository() {
        return repository;
    }

    public void setRepository(DroneRepository repository) {
        this.repository = repository;
    }

    public MedicationRepository getMedicationRepository() {
        return medicationRepository;
    }

    public void setMedicationRepository(MedicationRepository medicationRepository) {
        this.medicationRepository = medicationRepository;
    }

    @GetMapping("/drones")
    public ResponseEntity<List<Drone>> findAll() {
        return ResponseEntity.ok(repository.findAll());
    }

    @GetMapping("/drones/{id}")
    public ResponseEntity<Drone> findOneById(@PathVariable Long id) {
        Optional<Drone> result = repository.findById(id);
        if (isResultEmpty(result)) // If the id isn't found
            return droneNotFound();
        return ok(result.get());
    }

    @PostMapping("/drones/new")
    public ResponseEntity<Drone> create(@RequestBody Drone drone) {
        if (idIsNull(drone)) // If the new drone has an id, there should be an error, because the id is autogenerated
            return droneBadRequest();

        if (checkStateAndBattery(drone)) // Prevent the drone from being in LOADING state if the battery level is below 25%
            return droneBadRequest();

        Medication medication = drone.getMedication();

        if (isMedicationEmpty(medication)) // If the medication isn't found
            return droneNotFound();

        if (drone.getState() == null) // If the state isn't set, default to IDLE
            drone.setState(State.IDLE);

        if (isMoreWeight(drone, medication)) // Prevent the drone from being loaded with more weight that it can carry
            return droneBadRequest();

        Drone newDrone = repository.save(drone);

        return ok(newDrone);
    }


    @PutMapping("/drones/edit/{id}")
    public ResponseEntity<Drone> update(@RequestBody Drone drone, @PathVariable Long id) {
        if (id == null) // If the drone doesn't have an id, there should be an error. When editing, it should have an id
            return droneBadRequest();

        Optional<Drone> result = repository.findById(id);

        if (isResultEmpty(result)) // If the id isn't found
            return droneNotFound();

        if (checkStateAndBattery(drone)) // Prevent the drone from being in LOADING state if the battery level is below 25%
            return droneBadRequest();

        Medication medication = drone.getMedication();

        if (isMedicationEmpty(medication)) // If the medication isn't found
            return droneNotFound();

        if (drone.getState() == null) // If the state isn't set, default to IDLE
            drone.setState(State.IDLE);

        if (isMoreWeight(drone, medication)) // Prevent the drone from being loaded with more weight that it can carry
            return droneBadRequest();

        Drone editedDrone = repository.save(drone);
        return ok(editedDrone);
    }

    private boolean isResultEmpty(Optional<Drone> result) {
        return result.isEmpty();
    }

    @DeleteMapping("/drones/delete/{id}")
    public ResponseEntity<Drone> delete(@PathVariable Long id) {
        if (id == null) // If the drone doesn't have an id, there should be an error. When deleting, it should have an id
            return droneBadRequest();

        Optional<Drone> result = repository.findById(id);
        if (isResultEmpty(result)) // If the id isn't found
            return droneNotFound();

        Drone deletedDrone = result.get();
        repository.deleteById(id);
        return ok(deletedDrone);
    }

    @GetMapping("/drones/medication/{id}")
    public ResponseEntity<Medication> loadedMedication(@PathVariable Long id) {
        Optional<Drone> result = repository.findById(id);
        if (isResultEmpty(result)) // If the id isn't found
            return medicationNotFound();
        return ResponseEntity.ok(result.get().getMedication());
    }

    @GetMapping("/drones/available")
    public ResponseEntity<List<Drone>> findAllAvailable() {
        return ResponseEntity.ok(repository.findAll(Example.of(new Drone(null, null, null, null, null, State.IDLE))));
    }

    @GetMapping("/drones/battery/{id}")
    public ResponseEntity<Double> batteryLevelFromId(@PathVariable Long id) {
        Optional<Drone> result = repository.findById(id);
        if (isResultEmpty(result))
            return doubleNotFound();
        return ResponseEntity.ok(result.get().getBattery());
    }

    @PutMapping("/drones/load/{id}")
    public ResponseEntity<Drone> loadWithMedication(@RequestBody Medication medication, @PathVariable Long id) {
        if (id == null) // If the drone doesn't have an id, there should be an error. When editing, it should have an id
            return droneBadRequest();

        if (medication.getId() == null)
            return droneNotFound();

        if (isMedicationEmpty(medication)) // If the medication isn't found
            return droneNotFound();


        Optional<Drone> result = repository.findById(id);

        if (isResultEmpty(result)) // If the id isn't found
            return droneNotFound();

        Drone editedDrone = result.get();

        if (isMoreWeight(editedDrone, medication)) // Prevent the drone from being loaded with more weight that it can carry
            return droneBadRequest();

        editedDrone.setMedication(medication);
        editedDrone.setState(State.LOADED);
        editedDrone = repository.save(editedDrone);
        return ok(editedDrone);
    }

    private ResponseEntity<Drone> ok(Drone newDrone) {
        return ResponseEntity.ok(newDrone);
    }


    private ResponseEntity<Drone> droneNotFound() {
        return ResponseEntity.notFound().build();
    }

    private ResponseEntity<Double> doubleNotFound() {
        return ResponseEntity.notFound().build();
    }

    private ResponseEntity<Drone> droneBadRequest() {
        return ResponseEntity.badRequest().build();
    }

    private ResponseEntity<Medication> medicationNotFound() {
        return ResponseEntity.notFound().build();
    }

    private ResponseEntity<Medication> medicationBadRequest() {
        return ResponseEntity.badRequest().build();
    }

    private boolean isMoreWeight(Drone drone, Medication medication) {
        return medication.getWeight() > drone.getWeightLimit();
    }

    private boolean isMedicationEmpty(Medication medication) {
        return medicationRepository.findById(medication.getId()).isEmpty();
    }

    private boolean idIsNull(Drone drone) {
        return drone.getId() != null;
    }

    private boolean checkStateAndBattery(Drone drone) {
        return drone.getState() == State.LOADING && drone.getBattery() < 25.0;
    }
}
